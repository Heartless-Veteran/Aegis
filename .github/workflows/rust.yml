name: Rust CI - Comprehensive

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test_and_lint:
    # Use a matrix strategy to run the job on different operating systems.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }} # Runs on the OS specified in the matrix.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # Explicitly add components needed for formatting and linting.
          components: rustfmt, clippy

      # Cache dependencies to speed up subsequent runs.
      # The cache is keyed by OS, the hash of Cargo.lock, and the toolchain.
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Step 1: Check code formatting. The `--check` flag fails if the code is not formatted correctly.
      - name: Check formatting
        run: cargo fmt -- --check

      # Step 2: Run Clippy for linting. '-D warnings' treats all warnings as errors.
      - name: Run Clippy
        run: cargo clippy -- -D warnings

      # Step 3: Build the project.
      - name: Build
        run: cargo build --verbose

      # Step 4: Run tests.
      - name: Run tests
        run: cargo test --verbose
